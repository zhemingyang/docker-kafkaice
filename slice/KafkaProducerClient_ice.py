# **********************************************************************
#
# Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `KafkaProducerClient.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module bfd
_M_bfd = Ice.openModule('bfd')
__name__ = 'bfd'

# Start of module bfd.kafkaproducerclient
_M_bfd.kafkaproducerclient = Ice.openModule('bfd.kafkaproducerclient')
__name__ = 'bfd.kafkaproducerclient'

if '_t_messagelist' not in _M_bfd.kafkaproducerclient.__dict__:
    _M_bfd.kafkaproducerclient._t_messagelist = IcePy.defineSequence('::bfd::kafkaproducerclient::messagelist', (), IcePy._t_string)

if 'KafkaProducerClientManager' not in _M_bfd.kafkaproducerclient.__dict__:
    _M_bfd.kafkaproducerclient.KafkaProducerClientManager = Ice.createTempClass()
    class KafkaProducerClientManager(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_bfd.kafkaproducerclient.KafkaProducerClientManager:
                raise RuntimeError('bfd.kafkaproducerclient.KafkaProducerClientManager is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::bfd::kafkaproducerclient::KafkaProducerClientManager')

        def ice_id(self, current=None):
            return '::bfd::kafkaproducerclient::KafkaProducerClientManager'

        def ice_staticId():
            return '::bfd::kafkaproducerclient::KafkaProducerClientManager'
        ice_staticId = staticmethod(ice_staticId)

        def getUserID(self, current=None):
            pass

        def send(self, topic, message, userid, current=None):
            pass

        def mulitsend(self, topic, message, userid, current=None):
            pass

        def close(self, topic, userid, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_bfd.kafkaproducerclient._t_KafkaProducerClientManager)

        __repr__ = __str__

    _M_bfd.kafkaproducerclient.KafkaProducerClientManagerPrx = Ice.createTempClass()
    class KafkaProducerClientManagerPrx(Ice.ObjectPrx):

        def getUserID(self, _ctx=None):
            return _M_bfd.kafkaproducerclient.KafkaProducerClientManager._op_getUserID.invoke(self, ((), _ctx))

        def begin_getUserID(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_bfd.kafkaproducerclient.KafkaProducerClientManager._op_getUserID.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getUserID(self, _r):
            return _M_bfd.kafkaproducerclient.KafkaProducerClientManager._op_getUserID.end(self, _r)

        def send(self, topic, message, userid, _ctx=None):
            return _M_bfd.kafkaproducerclient.KafkaProducerClientManager._op_send.invoke(self, ((topic, message, userid), _ctx))

        def begin_send(self, topic, message, userid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_bfd.kafkaproducerclient.KafkaProducerClientManager._op_send.begin(self, ((topic, message, userid), _response, _ex, _sent, _ctx))

        def end_send(self, _r):
            return _M_bfd.kafkaproducerclient.KafkaProducerClientManager._op_send.end(self, _r)

        def mulitsend(self, topic, message, userid, _ctx=None):
            return _M_bfd.kafkaproducerclient.KafkaProducerClientManager._op_mulitsend.invoke(self, ((topic, message, userid), _ctx))

        def begin_mulitsend(self, topic, message, userid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_bfd.kafkaproducerclient.KafkaProducerClientManager._op_mulitsend.begin(self, ((topic, message, userid), _response, _ex, _sent, _ctx))

        def end_mulitsend(self, _r):
            return _M_bfd.kafkaproducerclient.KafkaProducerClientManager._op_mulitsend.end(self, _r)

        def close(self, topic, userid, _ctx=None):
            return _M_bfd.kafkaproducerclient.KafkaProducerClientManager._op_close.invoke(self, ((topic, userid), _ctx))

        def begin_close(self, topic, userid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_bfd.kafkaproducerclient.KafkaProducerClientManager._op_close.begin(self, ((topic, userid), _response, _ex, _sent, _ctx))

        def end_close(self, _r):
            return _M_bfd.kafkaproducerclient.KafkaProducerClientManager._op_close.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_bfd.kafkaproducerclient.KafkaProducerClientManagerPrx.ice_checkedCast(proxy, '::bfd::kafkaproducerclient::KafkaProducerClientManager', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_bfd.kafkaproducerclient.KafkaProducerClientManagerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_bfd.kafkaproducerclient._t_KafkaProducerClientManagerPrx = IcePy.defineProxy('::bfd::kafkaproducerclient::KafkaProducerClientManager', KafkaProducerClientManagerPrx)

    _M_bfd.kafkaproducerclient._t_KafkaProducerClientManager = IcePy.defineClass('::bfd::kafkaproducerclient::KafkaProducerClientManager', KafkaProducerClientManager, -1, (), True, False, None, (), ())
    KafkaProducerClientManager._ice_type = _M_bfd.kafkaproducerclient._t_KafkaProducerClientManager

    KafkaProducerClientManager._op_getUserID = IcePy.Operation('getUserID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_long, False, 0), ())
    KafkaProducerClientManager._op_send = IcePy.Operation('send', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    KafkaProducerClientManager._op_mulitsend = IcePy.Operation('mulitsend', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_bfd.kafkaproducerclient._t_messagelist, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_int, False, 0), ())
    KafkaProducerClientManager._op_close = IcePy.Operation('close', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (), None, ())

    _M_bfd.kafkaproducerclient.KafkaProducerClientManager = KafkaProducerClientManager
    del KafkaProducerClientManager

    _M_bfd.kafkaproducerclient.KafkaProducerClientManagerPrx = KafkaProducerClientManagerPrx
    del KafkaProducerClientManagerPrx

# End of module bfd.kafkaproducerclient

__name__ = 'bfd'

# End of module bfd
